//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Lifeprojects.de">
//     Class: Program
//     Copyright © Lifeprojects.de 2023
// </copyright>
//
// <author>Gerhard Ahrens - Lifeprojects.de</author>
// <email>developer@lifeprojects.de</email>
// <date>01.03.2023 14:04:02</date>
//
// <summary>
// Konsolen Applikation mit Menü
// </summary>
//-----------------------------------------------------------------------

namespace Console.FileCryptography
{
    using System;
    using System.Reflection;
    using System.Runtime.InteropServices;

    using EasyPrototypingNET.IO;

    public class Program
    {
        private static void Main(string[] args)
        {
            do
            {
                Console.Clear();
                Console.WriteLine("1. Cryption without Password");
                Console.WriteLine("2. Cryption with Password");
                Console.WriteLine("X. Beenden");

                Console.WriteLine("Wählen Sie einen Menüpunkt oder 'x' für beenden");
                ConsoleKey key = Console.ReadKey(true).Key;
                if (key == ConsoleKey.X)
                {
                    Environment.Exit(0);
                }
                else
                {
                    if (key == ConsoleKey.D1)
                    {
                        MenuPoint1();
                    }
                    else if (key == ConsoleKey.D2)
                    {
                        MenuPoint2();
                    }
                }
            }
            while (true);
        }

        private static void MenuPoint1()
        {
            Console.Clear();

            string file = CurrentAssemblyPath();
            DirectoryInfo filePath = new DirectoryInfo(file).Parent.Parent.Parent;
            string fileSource = Path.Combine(filePath.FullName, "TestDatei");
            if (Directory.Exists(fileSource) == true)
            {
                using (FileCryption fc = new FileCryption())
                {
                    fc.FileEncrypt($"{fileSource}\\FileCryption.png", $"{file}\\FileCryption.png.aes");

                    fc.FileDecrypt($"{file}\\FileCryption.png.aes", $"{file}\\FileCryption_neu.png");
                }

                FileInfo originalFile = new FileInfo($"{fileSource}\\FileCryption.png");
                FileInfo afterCryptFile = new FileInfo($"{file}\\FileCryption_neu.png");

                if (originalFile.Length == afterCryptFile.Length)
                {
                    ConsoleHelper.WriteLine("Beide Dateien sind gleich", ConsoleColor.Green);
                }
                else
                {
                    ConsoleHelper.WriteLine("Dateien sind nach dem verschlüsseln ungleich.", ConsoleColor.Red);
                }
            }

            ConsoleHelper.Wait();
        }

        private static void MenuPoint2()
        {
            Console.Clear();

            string file = CurrentAssemblyPath();
            DirectoryInfo filePath = new DirectoryInfo(file).Parent.Parent.Parent;
            string fileSource = Path.Combine(filePath.FullName, "TestDatei");
            if (Directory.Exists(fileSource) == true)
            {
                const string password = "ThePasswordToDecryptAndEncryptTheFile";

                using (FileCryption fc = new FileCryption())
                {
                    fc.FileEncrypt($"{fileSource}\\FileCryption.png", $"{file}\\FileCryption.png.aes", password);

                    fc.FileDecrypt($"{file}\\FileCryption.png.aes", $"{file}\\FileCryption_neu.png", password);

                    GCHandle gch1 = GCHandle.Alloc(password, GCHandleType.Pinned);
                    FileCryption.ZeroMemory(gch1.AddrOfPinnedObject(), password.Length * 2);
                    gch1.Free();

                    FileInfo originalFile = new FileInfo($"{fileSource}\\FileCryption.png");
                    FileInfo afterCryptFile = new FileInfo($"{file}\\FileCryption_neu.png");
                    if (originalFile.Length == afterCryptFile.Length)
                    {
                        ConsoleHelper.WriteLine("Beide Dateien sind gleich", ConsoleColor.Green);
                    }
                    else
                    {
                        ConsoleHelper.WriteLine("Dateien sind nach dem verschlüsseln ungleich.", ConsoleColor.Red);
                    }
                }
            }

            ConsoleHelper.Wait();
        }

        private static string CurrentAssemblyPath()
        {
            string result = string.Empty;

            Assembly assm = Assembly.GetEntryAssembly();
            result = Path.GetDirectoryName(assm.Location);

            return result;
        }
    }
}
