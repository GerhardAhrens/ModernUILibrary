//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Lifeprojects.de">
//     Class: Program
//     Copyright © Lifeprojects.de 2024
// </copyright>
//
// <author>Gerhard Ahrens - Lifeprojects.de</author>
// <email>developer@lifeprojects.de</email>
// <date>26.03.2024 08:21:27</date>
//
// <summary>
// Konsolen Applikation mit Menü
// </summary>
//-----------------------------------------------------------------------

namespace Console.IValidatebleClass
{
    using System;
    using System.ComponentModel.DataAnnotations;

    public class Program
    {
        private static void Main(string[] args)
        {
            do
            {
                Console.Clear();
                Console.WriteLine("1. IValidatableObject, valid OK");
                Console.WriteLine("2. IValidatableObject, wrong Content");
                Console.WriteLine("X. Beenden");

                Console.WriteLine("Wählen Sie einen Menüpunkt oder 'x' für beenden");
                ConsoleKey key = Console.ReadKey(true).Key;
                if (key == ConsoleKey.X)
                {
                    Environment.Exit(0);
                }
                else
                {
                    if (key == ConsoleKey.D1)
                    {
                        MenuPoint1();
                    }
                    else if (key == ConsoleKey.D2)
                    {
                        MenuPoint2();
                    }
                }
            }
            while (true);
        }

        private static void MenuPoint1()
        {
            var result = new List<ValidationResult>();
            bool validateAllProperties = false;

            Console.Clear();

            var employee = new Employee()
            {
                Id = -1,
                Name = "Gerhard Ahrens",
                Status = true,
                DesignationId = 1
            };

            bool isValid = Validator.TryValidateObject(employee, new ValidationContext(employee, null, null), result, validateAllProperties);

            if (isValid == true && result.Count == 0)
            {
                Console.WriteLine("Kein Fehler gefunden!");
            }
            else
            {
                if (result != null && result.Count > 0)
                {
                    foreach (ValidationResult validItem in result)
                    {
                        Console.WriteLine(validItem.ErrorMessage);
                    }
                }
            }

            Console.WriteLine("");
            Console.WriteLine("Menüpunkt 1, eine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPoint2()
        {
            var result = new List<ValidationResult>();
            bool validateAllProperties = false;

            Console.Clear();

            var employee = new Employee()
            {
                Id = -1,
                Name = string.Empty,
                Status = true,
                DesignationId = 1
            };

            bool isValid = Validator.TryValidateObject(employee, new ValidationContext(employee, null, null), result, validateAllProperties);

            if (isValid == true && result.Count == 0)
            {
                Console.WriteLine("Kein Fehler gefunden!");
            }
            else
            {
                if (result != null && result.Count > 0)
                {
                    foreach (ValidationResult validItem in result)
                    {
                        Console.WriteLine(validItem.ErrorMessage);
                    }
                }
            }

            Console.WriteLine("");
            Console.WriteLine("Menüpunkt 2, eine Taste drücken für zurück!");
            Console.ReadKey();
        }
    }

    public class Employee : IValidatableObject
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool Status { get; set; }
        public int DesignationId { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (this.Id <= 0)
            {
                yield return new ValidationResult("Employee Id is a required filed!", new[] { "Id" });
            }

            if (string.IsNullOrEmpty(this.Name))
            {
                yield return new ValidationResult("Employee Name is a required field!", new[] { "Name" });
            }
        }
    }
}
