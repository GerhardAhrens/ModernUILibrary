namespace Console.WeakEventManagerDemo
{
    using System;
    using System.Windows;

    public class Program
    {
        private static void Main(string[] args)
        {
            do
            {
                Console.Clear();
                Console.WriteLine("1. WeakEvent Manager");
                Console.WriteLine("X. Beenden");

                Console.WriteLine("Wählen Sie einen Menüpunkt oder 'x' für beenden");
                ConsoleKey key = Console.ReadKey(true).Key;
                if (key == ConsoleKey.X)
                {
                    Environment.Exit(0);
                }
                else
                {
                    if (key == ConsoleKey.D1)
                    {
                        MenuPoint1();
                    }
                }
            }
            while (true);
        }

        private static void MenuPoint1()
        {
            Console.Clear();

            var publisher = new BookPublisher();

            var customer1 = new BookLover("Max");
            WeakEventManager<BookPublisher, BookInfoEventArgs>.AddHandler(publisher, "BookSubscibers", customer1.NewBookPublished);

            var costomer2 = new BookLover("Moriz");
            WeakEventManager<BookPublisher, BookInfoEventArgs>.AddHandler(publisher, "BookSubscibers", costomer2.NewBookPublished);

            //Publish new Book
            publisher.PublishNewBook(new Book
            {
                BookName = "Learn C++",
                ISBN = "HJNJJJ782332HH",
                PublishDate = DateTime.Now,
                Authors = "Gerhard"
            });

            Console.ReadKey();
        }

        private static void MenuPoint2()
        {
            Console.Clear();
            Console.WriteLine("Menüpunkt 2, eine Taste drücken für zurück!");
            Console.ReadKey();
        }
    }

    public class Book
    {
        public string BookName { get; set; }
        public DateTime PublishDate { get; set; }
        public string ISBN { get; set; }
        public string Authors { get; set; }
    }

    // Custom event argument for passing extra information
    public class BookInfoEventArgs : EventArgs
    {
        public Book bookInfo { get; private set; }
        public BookInfoEventArgs(Book book)
        {
            this.bookInfo = book;
        }
    }

    public class BookPublisher
    {
        public event EventHandler BookSubscibers;

        public void PublishNewBook(Book book)
        {
            if (BookSubscibers != null)
            {
                BookSubscibers(this, new BookInfoEventArgs(book));
            }
        }
    }

    public class BookLover
    {
        public string Name { get; private set; }

        public BookLover(string name)
        {
            this.Name = name;
        }

        public void NewBookPublished(object sender, BookInfoEventArgs e)
        {
            Console.WriteLine($"{this.Name}, Neues Buch veröffentlicht, Buchinformationen: \nBuchname :{e.bookInfo.BookName}\nErschienen am: {e.bookInfo.PublishDate}\nISBN : {e.bookInfo.ISBN}\nAutor: {e.bookInfo.Authors}\n\n");
        }
    }
}