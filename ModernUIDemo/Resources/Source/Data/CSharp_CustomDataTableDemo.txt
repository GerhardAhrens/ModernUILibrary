namespace Console.CustomDataRow
{
    using System;
    using System.Data;
    using System.Reflection;

    public class Program
    {
        private static void Main(string[] args)
        {
            do
            {
                Console.Clear();
                Console.WriteLine("1. Create Demo Table");
                Console.WriteLine("2. Menüpunkt 2");
                Console.WriteLine("X. Beenden");

                Console.WriteLine("Wählen Sie einen Menüpunkt oder 'x' für beenden");
                ConsoleKey key = Console.ReadKey(true).Key;
                if (key == ConsoleKey.X)
                {
                    Environment.Exit(0);
                }
                else
                {
                    if (key == ConsoleKey.D1)
                    {
                        MenuPoint1();
                    }
                    else if (key == ConsoleKey.D2)
                    {
                        MenuPoint2();
                    }
                }
            }
            while (true);
        }

        private static void MenuPoint1()
        {
            Console.Clear();

            MyDataTable table = new MyDataTable();
            table.TableName = "CustomDataTable";
            table.MyDataRowChanged += new MyDataRowChangedDlgt(OnMyDataRowChanged);
            MyDataRow row = table.GetNewRow();
            table.Add(row);
            row = table.GetNewRow();
            table.Add(row);
            table.AcceptChanges();

            MyDataRow row1 = (MyDataRow)table.Rows[1];
            row1.SetField<string>("TextTyp","Hallo");
            MyDataRow cloneRow = table.Clone(1);
            int count = table.Count;
            table.WriteXml(Path.Combine(AppContext.BaseDirectory,"TestCustomTable.xlm"));

            foreach (MyDataRow myRow in table.Rows)
            { 
                DataRowState rowstate = myRow.RowState;
                Guid colValue = myRow.Field<Guid>("Id");
                Guid id = myRow.Id;
                Console.WriteLine($"{colValue}; {id}");
            }

            Console.WriteLine("eine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPoint2()
        {
            Console.Clear();


            Console.WriteLine("eine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void OnMyDataRowChanged(MyDataTable sender, MyDataRowChangedEventArgs args)
        {
            /*
            if (args.Row.TextTyp != string.Empty)
            {
                throw new ApplicationException("Die Spalte 'TextTyp' muß mit string.Empty initalisiert werden.");
            }
            */
        }
    }
}