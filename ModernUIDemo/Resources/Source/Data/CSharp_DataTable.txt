namespace Console.DataTableDemo
{
    using System;
    using System.ComponentModel;
    using System.Data;
    using System.IO;

    public class Program
    {
        private static void Main(string[] args)
        {
            do
            {
                Console.Clear();
                Console.WriteLine("1. DataTable mit Struktur und Inhalt erstellen");
                Console.WriteLine("2. DataTable Join two DataTable, Ergebnis als DataTable");
                Console.WriteLine("3. DataTable Merge two DataTable");
                Console.WriteLine("4. DataTable Copy ");
                Console.WriteLine("5. DataTable Copy, mit Änderung ");
                Console.WriteLine("6. DataTable Import DataRow ");
                Console.WriteLine("7. DataTable Grouping ");
                Console.WriteLine("8. DataTable Sorting ");
                Console.WriteLine("9. DataRow Equals/Compare ");
                Console.WriteLine("A. DateTable Export/Import XML");
                Console.WriteLine("B. DateTable Export/Import Json");
                Console.WriteLine("C. DataRow to Object");
                Console.WriteLine("X. Beenden");

                Console.WriteLine("Wählen Sie einen Menüpunkt oder 'x' für beenden");
                ConsoleKey key = Console.ReadKey(true).Key;
                if (key == ConsoleKey.X)
                {
                    Environment.Exit(0);
                }
                else
                {
                    if (key == ConsoleKey.D1)
                    {
                        MenuPoint1();
                    }
                    else if (key == ConsoleKey.D2)
                    {
                        MenuPoint2();
                    }
                    else if (key == ConsoleKey.D3)
                    {
                        MenuPoint3();
                    }
                    else if (key == ConsoleKey.D4)
                    {
                        MenuPoint4();
                    }
                    else if (key == ConsoleKey.D5)
                    {
                        MenuPoint4WithEdit();
                    }
                    else if (key == ConsoleKey.D6)
                    {
                        MenuPoint6();
                    }
                    else if (key == ConsoleKey.D7)
                    {
                        MenuPoint7();
                    }
                    else if (key == ConsoleKey.D8)
                    {
                        MenuPoint8();
                    }
                    else if (key == ConsoleKey.D9)
                    {
                        MenuPoint9();
                    }
                    else if (key == ConsoleKey.A)
                    {
                        MenuPointA();
                    }
                    else if (key == ConsoleKey.B)
                    {
                        MenuPointB();
                    }
                    else if (key == ConsoleKey.C)
                    {
                        MenuPointC();
                    }
                }
            }
            while (true);
        }

        private static void MenuPoint1()
        {
            DataTable dt;

            dt = CreateStruktur();
            dt = FillWithContent(dt);
            dt = FillWithOverRows(dt);

            Console.Clear();

            DisplayContent(dt);

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPoint2()
        {
            Console.Clear();
            DataTable dt;
            DataTable dtCountry;

            dt = CreateStruktur();

            dt = FillWithContent(dt);
            dt = FillWithOverRows(dt);

            dtCountry = CreateStructureCountry();

            var joinResult = (from n in dt.AsEnumerable()
                              join c in dtCountry.AsEnumerable()
                              on n.Field<string>("Country") equals c.Field<string>("Key")
                              select new 
                              {
                                  Author = n.Field<string>("Author"),
                                  Birthday = n.Field<DateTime>("Birthday").ToShortDateString(),
                                  CountryName = c.Field<string>("Name")
                              });

            DataTable dtJoin = joinResult.CopyToDataTable();

            DisplayContent(dtJoin);

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPoint3()
        {
            Console.Clear();

            DataTable dt = new DataTable("DTAuthor");
            dt.Columns.Add("Author", typeof(string));
            dt.Columns.Add("Birthday", typeof(DateTime));
            dt.Columns.Add("IsActive", typeof(bool));
            dt.Columns.Add("Country", typeof(string));
            dt.PrimaryKey = new DataColumn[] { dt.Columns["Id"] };
            dt.Rows.Add("Gerhard Ahrens_1", new DateTime(1960, 6, 28), true, "DE");

            DataTable dtTwo = new DataTable("DTAuthorTwo");
            dtTwo.Columns.Add("Author", typeof(string));
            dtTwo.Columns.Add("Birthday", typeof(DateTime));
            dtTwo.Columns.Add("IsActive", typeof(bool));
            dtTwo.Columns.Add("Country", typeof(string));
            dtTwo.Columns.Add("Level", typeof(int));
            dtTwo.PrimaryKey = new DataColumn[] { dtTwo.Columns["Id"] };
            dtTwo.Rows.Add("Gerhard Ahrens_2", new DateTime(1960, 6, 28), true, "EN", 1);

            dt.Merge(dtTwo, true, MissingSchemaAction.Add);
            dt.AcceptChanges();

            DisplayContent(dt);

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPoint4()
        {
            Console.Clear();

            DataTable dt = new DataTable("DTAuthor");
            dt.Columns.Add("Id", typeof(Guid));
            dt.Columns.Add("Author", typeof(string));
            dt.Columns.Add("Birthday", typeof(DateTime));
            dt.Columns.Add("IsActive", typeof(bool));
            dt.Columns.Add("Country", typeof(string));
            dt.PrimaryKey = new DataColumn[] { dt.Columns["Id"] };
            dt.Rows.Add(Guid.NewGuid(), "Gerhard Ahrens", new DateTime(1960, 6, 28), true, "DE");

            DataTable copyDT = dt.Copy();
            DataTable cloneDT = dt.Clone();
            copyDT.TableName = "DTAuthorCopy";

            bool isSame = dt.CompareTo(copyDT);

            if (isSame == true)
            {
                Console.WriteLine($"\nbeide DataTable sind gleich");
            }
            else
            {
                Console.WriteLine($"\nbeide DataTable sind ungleich");
                DataTable diff = dt.GetDifferentRecords(copyDT);
                DisplayContent(diff);
            }

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPoint4WithEdit()
        {
            Console.Clear();

            DataTable dt = new DataTable("DTAuthor");
            dt.Columns.Add("Id", typeof(Guid));
            dt.Columns.Add("Author", typeof(string));
            dt.Columns.Add("Birthday", typeof(DateTime));
            dt.Columns.Add("IsActive", typeof(bool));
            dt.Columns.Add("Country", typeof(string));
            dt.PrimaryKey = new DataColumn[] { dt.Columns["Id"] };
            dt.Rows.Add(Guid.NewGuid(), "Gerhard Ahrens", new DateTime(1960, 6, 28), true, "DE");

            DataTable copyDT = dt.Copy();
            copyDT.TableName = "DTAuthorCopy";

            if (copyDT == dt)
            {

            }

            DataRow[] customerRow = copyDT.Select("Author = 'Gerhard Ahrens'");
            if (customerRow.Length > 0)
            {
                customerRow[0]["Author"] = "Gerhard Ahrens (Edit)";
                copyDT.AcceptChanges();
            }

            bool isSame = dt.CompareTo(copyDT);

            if (isSame == true)
            {
                Console.WriteLine($"\nbeide DataTable sind gleich");
            }
            else
            {
                Console.WriteLine($"\nbeide DataTable sind ungleich");
                DataTable diff = dt.GetDifferentRecords(copyDT);
                DisplayContent(diff);
            }

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPoint6()
        {
            Console.Clear();

            DataTable dt = new DataTable("DTAuthor");
            dt.Columns.Add("Author", typeof(string));
            dt.Columns.Add("Birthday", typeof(DateTime));
            dt.Columns.Add("IsActive", typeof(bool));
            dt.Columns.Add("Country", typeof(string));
            dt.PrimaryKey = new DataColumn[] { dt.Columns["Id"] };
            dt.Rows.Add("Gerhard Ahrens_orig", new DateTime(1960, 6, 28), true, "DE");

            DataTable dtTwo = new DataTable("DTAuthorTwo");
            dtTwo.Columns.Add("Author", typeof(string));
            dtTwo.Columns.Add("Birthday", typeof(DateTime));
            dtTwo.Columns.Add("IsActive", typeof(bool));
            dtTwo.Columns.Add("Country", typeof(string));
            dtTwo.Columns.Add("Level", typeof(int));
            dtTwo.PrimaryKey = new DataColumn[] { dtTwo.Columns["Id"] };
            dtTwo.Rows.Add("Gerhard Ahrens_add", new DateTime(1960, 6, 28), true, "EN", 1);

            foreach (DataRow row in dtTwo.Rows)
            {
                dt.ImportRow(row);
            }

            DisplayContent(dt);

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPoint7()
        {
            Console.Clear();

            DataTable dt = CreateStruktur();
            dt = FillWithContent(dt);
            dt = FillWithOverRows(dt);

            var groupByDt = dt.AsEnumerable().GroupBy(e => e.Field<string>("Country")).Select(d => new { d.Key, Count = d.Count() });

            DataTable dtGroup = groupByDt.CopyToDataTable();

            DisplayContent(dtGroup);

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPoint8()
        {
            Console.Clear();

            DataTable dt = CreateStruktur();
            dt = FillWithContent(dt);
            dt = FillWithOverRows(dt);

            DataTable sortByDt = dt.ToSorting(ListSortDirection.Ascending, "Author");

            DisplayContent(sortByDt);

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPoint9()
        {
            Console.Clear();

            DataTable dt = CreateStruktur();
            dt = FillWithContent(dt);

            DataRow dr1 = dt.AsEnumerable().First<DataRow>();
            DataRow dr2 = dt.AsEnumerable().First<DataRow>();

            dr2.SetField("Country", "EN");
            dr2.AcceptChanges();

            var isEquals = dr1.Equals(dr2);

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPointA()
        {
            Console.Clear();

            DataTable dt = CreateStruktur();
            dt = FillWithContent(dt);
            dt = FillWithOverRows(dt);

            string path = Environment.CurrentDirectory;
            string fileName = string.Format("{0}.xml", dt.TableName);
            string pathFile = Path.Combine(path, fileName);

            dt.WriteXml(pathFile, XmlWriteMode.WriteSchema);

            if (File.Exists(pathFile) == true)
            {
                DataTable newDT = dt.Clone();
                newDT.ReadXml(pathFile);

                newDT.TableName = "NewTable";
                bool isSame = dt.CompareTo(newDT);
                if (isSame == true)
                {
                    Console.WriteLine($"\nbeide DataTable sind gleich");
                }
                else
                {
                    Console.WriteLine($"\nbeide DataTable sind ungleich");
                    DataTable diff = dt.GetDifferentRecords(newDT);
                    DisplayContent(diff);
                }
            }

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPointB()
        {
            Console.Clear();

            DataTable dt = CreateStruktur();
            dt = FillWithContent(dt);
            dt = FillWithOverRows(dt);

            string path = Environment.CurrentDirectory;
            string fileName = string.Format("{0}.Json", dt.TableName);
            string pathFile = Path.Combine(path, fileName);

            string resultJson = dt.ToJson();
            using (TextWriter textWriter = new StreamWriter(pathFile))
            {
                textWriter.Write(resultJson);
                textWriter.Flush();
                textWriter.Close();
            }

            var aa = JsonToDataTable(resultJson);

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        private static void MenuPointC()
        {
            Console.Clear();

            DataTable dt = CreateStruktur();
            dt = FillWithContent(dt);
            dt = FillWithOverRows(dt);

            foreach (DataRow row in dt.Rows)
            {
                DtDemo demo = row.ToObject<DtDemo>();
                string c1 = demo.Country;

                dynamic demo2 = row.ToDynamicObject();
                string c2 = demo2.Country;
            }

            Console.WriteLine($"\nEine Taste drücken für zurück!");
            Console.ReadKey();
        }

        public static string JsonToDataTable(string jsonText)
        {
            IEnumerable<Dictionary<string, object>> tempList = System.Text.Json.JsonSerializer.Deserialize<IEnumerable<Dictionary<string, object>>>(jsonText);

            return default;
        }

        #region DataTable Struktur und Inhalt
        private static DataTable CreateStruktur()
        {
            DataTable dt = new DataTable("DataTableDemo");

            DataColumn dc = new DataColumn();
            dc.Caption = "Country";
            dc.ColumnName = "Country";
            dc.MaxLength = 3;
            dc.Unique = false;
            dc.AllowDBNull = false;

            dt.Columns.Add("Id", typeof(Guid));
            dt.Columns.Add("Author", typeof(string));
            dt.Columns.Add("Birthday", typeof(DateTime));
            dt.Columns.Add("IsActive", typeof(bool));
            dt.Columns.Add(dc);

            return dt;
        }

        private static DataTable CreateStructureCountry()
        {
            DataTable dt = new DataTable("DTCountry");
            dt.Columns.Add("Id", typeof(Guid));
            dt.Columns.Add("Key", typeof(string));
            dt.Columns.Add("Name", typeof(string));

            dt.Rows.Add(Guid.NewGuid(), "DE", "Deutschland");
            dt.Rows.Add(Guid.NewGuid(), "EN", "England");

            return dt;
        }

        private static DataTable ResultDtStruktur()
        {
            DataTable dt = new DataTable("Result");
            dt.Columns.Add("Author", typeof(string));
            dt.Columns.Add("Birthday", typeof(string));
            dt.Columns.Add("Country", typeof(string));

            return dt;
        }

        private static DataTable FillWithContent(DataTable dt)
        {
            dt.Rows.Add(Guid.NewGuid(), "Gerhard Ahrens", new DateTime(1960, 6, 28), true, "DE");
            dt.Rows.Add(Guid.NewGuid(), "Hurra Mustermann", new DateTime(1971, 1, 26), false, "DE");
            dt.Rows.Add(Guid.NewGuid(), "Karla Muterfrau", new DateTime(1984, 4, 20), true, "DE");
            dt.Rows.Add(Guid.NewGuid(), "John Lee", new DateTime(1967, 6, 26), true, "EN");
            dt.Rows.Add(Guid.NewGuid(), "Simon David", new DateTime(1977, 8, 3), true, "EN");

            dt.AcceptChanges();

            return dt;
        }

        private static DataTable FillWithOverRows(DataTable dt)
        {
            DataRow dr1 = dt.NewRow();
            dr1["Id"] = Guid.NewGuid();
            dr1["Author"] = "Otto Osterhase";
            dr1["Birthday"] = new DateTime(2017, 4, 16);
            dr1["IsActive"] = true;
            dr1["Country"] = "DE";
            dt.Rows.Add(dr1);
            dt.AcceptChanges();

            DataRow dr2 = dt.NewRow();
            dr2["Id"] = Guid.NewGuid();
            dr2["Author"] = "Max Osterhase";
            dr2["Birthday"] = new DateTime(2016, 4, 16);
            dr2["IsActive"] = false;
            dr2["Country"] = "DE";

            int yourPosition = 0;
            dt.Rows.InsertAt(dr2, yourPosition);
            dt.AcceptChanges();

            return dt;
        }

        private static void DisplayContent(DataTable dt)
        {
            string rowString = string.Empty;

            int step = 0;
            foreach (DataRow row in dt.Rows)
            {
                step++;
                rowString = RowHelper(row);
                Console.WriteLine($"[{step}] {rowString}");
            }
        }

        private static string RowHelper(DataRow row)
        {
            string rowString = string.Empty;

            rowString = string.Join(",", row.ItemArray);

            return rowString;
        }

        private static string RowHelper(object[] row)
        {
            string rowString = string.Empty;

            rowString = string.Join(",", row);

            return rowString;
        }
        #endregion DataTable Struktur und Inhalt

        #region Verschiedenes
        #endregion Verschiedenes
    }

    public class DtDemo
    {
        public string Author { get; set; }
        public DateTime Birthday { get; set; }
        public bool IsActive { get; set; }
        public string Country { get; set; }

    }
}
