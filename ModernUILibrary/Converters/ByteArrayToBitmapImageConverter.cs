//-----------------------------------------------------------------------
// <copyright file="TextToFlowDocumentConverter.cs" company="Lifeprojects.de">
//     Class: TextToFlowDocumentConverter
//     Copyright © Lifeprojects.de 2018
// </copyright>
//
// <author>Gerhard Ahrens - Lifeprojects.de</author>
// <email>developer@lifeprojects.de</email>
// <date>31.03.2017</date>
//
// <summary>WPF Converter for byte[] to BitmapImage</summary>
//  <auto-generated />
//-----------------------------------------------------------------------

namespace ModernIU.Converters
{
    using System;
    using System.Globalization;
    using System.IO;
    using System.Windows.Data;
    using System.Windows.Media;
    using System.Windows.Media.Imaging;

    [ValueConversion(typeof(byte[]), typeof(ImageSource))]
    public sealed class ByteToBitmapImageConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {

            if (value == null)
            {
                return new BitmapImage();
            }

            try
            {
                if (value is byte[])
                {
                    if (((byte[])value).Length > 0)
                    {
                        return ImageFromBuffer((byte[])value);
                    }
                    else
                    {
                        return new BitmapImage();
                    }
                }
                else
                {
                    return new BitmapImage();
                }
            }
            catch (Exception ex)
            {
                string errorText = ex.Message;
                return new BitmapImage();
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new InvalidOperationException("The ByteToImageConverter can only be used one-way (Source --> Target).");
        }

        private BitmapImage ImageFromBuffer(byte[] bytes)
        {
            MemoryStream stream = new MemoryStream(bytes);
            if (stream != null)
            {
                BitmapImage image = new BitmapImage();
                image.BeginInit();
                image.StreamSource = stream;
                image.EndInit();
                return image;
            }
            else
            {
                return null;
            }
        }

        private byte[] BufferFromImage(BitmapImage imageSource)
        {
            Stream stream = imageSource.StreamSource;
            byte[] buffer = null;
            if (stream != null && stream.Length > 0)
            {
                using (BinaryReader br = new BinaryReader(stream))
                {
                    buffer = br.ReadBytes((Int32)stream.Length);
                }
            }

            return buffer;
        }

    }
}
