//-----------------------------------------------------------------------
// <copyright file="ExceptionLogger.cs" company="Lifeprojects.de">
//     Class: ExceptionLogger<T>
//     Copyright © Lifeprojects.de 2018
// </copyright>
//
// <author>Gerhard Ahrens - Lifeprojects.de</author>
// <email>developer@lifeprojects.de</email>
// <date>31.03.2017</date>
//
// <summary>Abstract Class for Logging Target</summary>
//  <auto-generated />
//-----------------------------------------------------------------------

namespace ModernIU.Controls
{
    using System;
    using System.Reflection;

    public abstract class ExceptionLogger<T>
    {
        public virtual Guid Id { get; set; }

        public virtual string Title { get; set; }

        public virtual string ErrorLevel { get; set; }

        public virtual string ErrorText { get; set; }

        public virtual string UserAction { get; set; }

        public virtual string Version { get; set; }

        public virtual string CreatedBy { get; set; }

        public virtual DateTime CreatedOn { get; set; }

        public abstract void Save();

        public T ToClone()
        {
            var constructorInfo = typeof(T).GetConstructor(new Type[] { });
            if (constructorInfo != null)
            {
                var target = (T)constructorInfo.Invoke(new object[] { });

                const BindingFlags Flags = BindingFlags.Instance | BindingFlags.Public;
                var sourceProperties = this.GetType().GetProperties(Flags);

                foreach (PropertyInfo pi in sourceProperties)
                {
                    if (pi.CanWrite)
                    {
                        var propInfoObj = target.GetType().GetProperty(pi.Name);
                        if (propInfoObj != null)
                        {
                            var propValue = pi.GetValue(this, null);
                            if (pi.Name.ToUpper() == "ID")
                            {
                                propInfoObj.SetValue(target, Guid.NewGuid(), null);
                            }
                            else
                            {
                                propInfoObj.SetValue(target, propValue, null);
                            }
                        }
                    }
                }

                return target;
            }

            return default(T);
        }
    }
}
